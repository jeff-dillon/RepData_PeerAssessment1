library(KernSmooth)
demo()
q()
install.poackages("swirl")
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
c
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- pwd()
old.dir <- getwd()
setwd("~/r-workspace")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5, 10, length=30
)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Jeff")
c(my_char, "Jeff")
my_name <- c(my_char, "Jeff")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
bye()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[ , 19:23]
lapply(flag_shapes, range)
shape_mat -< sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,
| character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
bye()
library(datasets)
data(iris)
?iris
iris
lapply(iris, class)
tapply(iris, iris$Species, mean)
table(iris$Species)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?round
round(6.588, digits = 0)
apply(iris[2:5],2, mean)
apply(iris[1:4],2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$hp, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind, data=airquality,pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(pathtofile("myLabels.R"), local=TRUE)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat | color*cut, data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(), 10)
colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
pq <- colorRampPalette(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette("red","yellow")
p2 <- colorRampPalette(c("red","yellow")
)
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col = pal(20))
image(volcano,col = p1(20))
library(swirl())
swirl()
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, col=drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets=.~drv)
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method=lm)
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size=4,v alpha=1/2)
g + geom_point(color="pink", size=4, alpha=1/2)
g + geom_point(size=4, alpha=1/2, aes(color=drv))
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displaceent", y="Hwy Mileage")
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color=drv, size=2, alpha=1/2)) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myw,y=myy))
g <- ggplot(testdat, aes(x=myx,y=myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() +coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="block")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
bye
bye()
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carrot, price, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth,price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd]
diamonds[myd, ]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
fac <- c("New York", "Chicago", "San Jose", "Baltimore", "Chicago", "San Jose")
fac <- as.factor(fac)
fac[grep("Chi")]
grep("Chi", fac)
grepl("Chi", fac)
fac[grep("Chi",fac)]
install.packages("rmarkdown")
library(rmarkdown)
?rmarkdown
packages()
library(knitr)
setwd("~/r-workspace/Data Science/5 - Reproducible Research/Week 2")
library(datasets)
data(airquality)
summary(airquality)
pairs(airquality)
library(stats)
fit <- lm(Ozone ~ Wind + Solar.R + Temp, data = airquality)
summary(fit)
setwd("~/r-workspace/Data Science/5 - Reproducible Research/Week 2/Course Project 1/RepData_PeerAssessment1")
unzip("activity.zip", list = TRUE)
unzip("activity.zip")
read.csv("activity.csv")
activity <- read.csv("activity.csv")
file.remove("activity.csv")
View(activity)
byDay <- activity %>% group_by(date) %>%
summarise(steps = mean(steps))
library(dplyr)
byDay <- activity %>% group_by(date) %>%
summarise(steps = mean(steps))
View(byDay)
byDay <- activity %>% group_by(date) %>% summarise(total_steps = sum(steps), mean_steps = mean(steps), median_steps = median(steps))
plot(byDay)
hist(byDate)
hist(byDay)
hist(byDay$total_steps)
byDay
table(byDay)
str(byDay)
byDay <- activity %>% group_by(date) %>% summarise(total_steps = sum(steps), mean_steps = mean(steps), median_steps = median(steps, na.rm = TRUE))
View(byDay)
byDay <- activity %>% group_by(date) %>% summarise(total_steps = sum(steps), mean_steps = mean(steps, na.rm = TRUE), median_steps = median(steps, na.rm = TRUE))
byDay <- activity %>% group_by(date) %>% summarise(total_steps = sum(steps), mean_steps = mean(steps), median_steps = median(steps, na.rm = TRUE))
View(byDay)
byDay <- na.omit(activity) %>% group_by(date) %>% summarise(total_steps = sum(steps), mean_steps = mean(steps), median_steps = median(steps))
View(byDay)
print.data.frame(byDay)
byInterval <- activity %>%
group_by(interval) %>%
summarise(average_steps = mean(steps))
plot(byInterval, type="l")
plot(byInterval)
plot(byInterval$average_steps)
View(byInterval)
byInterval <- activity %>%
group_by(interval) %>%
summarise(average_steps = mean(steps))
byInterval <- activity %>%
group_by(interval) %>%
summarise(average_steps = mean(steps))
byInterval <- activity %>%
na.omit()
group_by(interval) %>%
summarise(average_steps = mean(steps))
byInterval <- activity %>%
na.omit()
group_by(interval) %>%
summarise(average_steps = mean(steps))
View(byInterval)
byInterval <- activity %>%
na.omit() %>%
group_by(interval) %>%
summarise(average_steps = mean(steps))
View(byInterval)
plot(byInterval)
plot(byInterval, type="l")
which.max(byInterval$average_steps)
byInterval[which.max(byInterval$average_steps)]
byInterval[,which.max(byInterval$average_steps)]
byInterval[which.max(byInterval$average_steps),]
byInterval[which.max(byInterval$average_steps),]$interval
